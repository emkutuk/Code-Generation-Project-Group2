openapi: "3.0.2"
info:
  version: '1.3'
  title: Inholland Bank API
  description: API for the Inholland banking application.
  termsOfService: n/a
  contact:
    name: Group2
    url: https://www.github.com
    email: 638931@student.inholland.nl
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  - url: https://inholland-bank-api-group2.herokuapp.com/api
    description: Live Server

  - url: https://localhost:8080/api
    description: Test server

paths:
  /Users:
    get:
      tags:
        - User
      summary: Get all users registered on the system.
      description: Fetches the entire list of users stored on the system.
      operationId: getAllUsers
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/emailParam"
      responses:
        "200":
          description: Returns a list of users
          content:
            application/json:
              schema:
                maxItems: 50
                type: array
                items:
                  $ref: "#/components/schemas/User"

    post:
      tags:
        - User
      summary: Registers a user.
      description: Register a user to the system.
      operationId: createUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: The user has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /Users/{id}:
    get:
      tags:
        - User
      summary: Get a user by their ID.
      description: Fetches a user from the system by the ID provided.
      operationId: getUserById
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "200":
          description: Succesful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
    
    put:
      tags:
        - User
      summary: Update a user.
      description: User(customer - employee) can update their information.
      operationId: updateUserById
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      parameters:
        - $ref: "#/components/parameters/userIdParam"
      responses:
        "201":
          description: Information has been updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'

    delete:
      summary: Delete a user.
      tags:
      - User
      description: Change user accountStatus to Inactive.
      operationId: deleteUserById
      parameters:
      - $ref:  "#/components/parameters/userIdParam"
      responses:
        "204":
          description: User set as inactive.

  /Users/Login/:
    post:
      security: []
      summary: User login.
      tags:
        - User
      description: login
      operationId: loginUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
              
      responses:
        "200":
          description: User logged in.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BearerTokenDto"

  /Transactions:
    post:
      tags:
        - Transaction
      summary: Create a new Transaction.
      description: Create a new Transaction.
      operationId: createTransaction

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegularTransaction"

      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RegularTransaction"

    get:
      tags:
        - Transaction
      summary: Return a list of Transactions.
      description: Returns an ordered list of Transactions for current user from most recent to oldest.
      operationId: getTransactionsByUser

      parameters:
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 50
                items:
                  anyOf:
                    - $ref: "#/components/schemas/Deposit"
                    - $ref: "#/components/schemas/Withdrawal"
                    - $ref: "#/components/schemas/RegularTransaction"

  /Transactions/Deposit:
    post:
      tags:
        - Transaction
      summary: Deposit money into an account.
      description: Deposit money into an account.
      operationId: depositMoney

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Deposit"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Deposit"

  /Transactions/Withdraw:
    post:
      tags:
        - Transaction
      summary: Withdraw money from an account.
      description: Withdraw money from the given account.
      operationId: withdrawMoney

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Withdrawal"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Withdrawal"

  /Transactions/{id}:
    get:
      tags:
        - Transaction
      summary: Return a Transaction with the specified ID.
      description: Get a specific transaction by its ID.
      operationId: getTransactionById

      parameters:
        - $ref: "#/components/parameters/transactionIdParam"

      responses:
        "200":
          description: OK
          content:
            application/json:
               schema:
                anyOf:
                  - $ref: "#/components/schemas/Deposit"
                  - $ref: "#/components/schemas/Withdrawal"
                  - $ref: "#/components/schemas/RegularTransaction"

    delete:
      tags:
        - Transaction
      summary: Delete a scheduled transaction
      description: >
        Delete a scheduled transaction by it's ID.
        You cannot delete a transaction that has already been processed.
      operationId: deleteTransactionById

      parameters:
        - $ref: "#/components/parameters/transactionIdParam"

      responses:
        "204":
          description: OK

  /Transactions/{iban}:
    get:
      tags:
        - Transaction
      summary: Return a list of Transactions from IBAN.
      description: Return a list of transactions from the account with the specified IBAN.
      operationId: getTransactionByIBAN

      parameters:
        - $ref: "#/components/parameters/ibanParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/offsetParam"

      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                maxItems: 50
                items:
                  anyOf:
                  - $ref: "#/components/schemas/Deposit"
                  - $ref: "#/components/schemas/Withdrawal"
                  - $ref: "#/components/schemas/RegularTransaction"

  /Accounts/{iban}:
    summary: Represents an account
    description: >
      This resource represents and individual account in the system.
      Each account is identified by an Iban number.
    get:
      tags:
        - Account
      summary: Gets an account by Iban.
      operationId: getAccountByIban
      parameters:
        - $ref: "#/components/parameters/ibanParam"
      responses:
        "200":
          description: An account object has been returned.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

    put:
      tags:
        - Account
      summary: Updates an existing account
      operationId: updateAccountByIban
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Account'
      parameters:
        - $ref: "#/components/parameters/ibanParam"
      responses:
        "200":
          description: An account object has been updated.

  /Accounts/{iban}/{type}:
    summary: Represents an account type
    description: >
      This resource represents and individual account type in the system.
      Each account is identified by an Iban number.
    post:
      tags:
        - Account
      summary: Changes account type.
      operationId: changeAccountType
      parameters:
        - $ref: "#/components/parameters/ibanParam"
        - in: path
          name: type
          description: The new type for the account to be changed into.
          required: true
          schema:
            type: string
            enum: [saving, current]
      responses:
        "200":
          description: The account type has been changed.

  /Accounts:
    summary: Represents an account object
    description: >
      This resource represents and individual account object in the system.
      Each account is identified by a unique Iban number.
    post:
      tags:
        - Account
      summary: Adds a new Account
      operationId: addANewAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account"
      responses:
        "201":
          description: The new account has been created.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"

    get:
      tags:
        - Account
      summary: Gets all accounts
      operationId: getAllAccounts
      parameters:
        - $ref: "#/components/parameters/offsetParam"
        - $ref: "#/components/parameters/limitParam"
      responses:
        '200':
          description: Paginated accounts have been returned

  /Accounts/{iban}/Balance:
    summary: Represents an account balance
    description: >
      This resource represents an account's balance.
      Each account is identified by an Iban number.
    get:
      tags:
        - Account
      summary: Gets an account balance by Iban.
      operationId: getAccountBalanceByIban
      parameters:
      - $ref: "#/components/parameters/ibanParam"
      responses:
        "200":
          description: Balance of the account has been returned.
  
  /Accounts/{iban}/Status/{status}:
    summary: Changes the specified account's status
    description: >
      This changes an account's status.
      Each account is identified by an Iban number.
    post:
      tags:
        - Account
      summary: Change an Account Status
      operationId: changeAccountStatus
      parameters:
      - $ref: "#/components/parameters/ibanParam"
      - in: path
        name: status
        description: Account status to be changed to.
        required: true
        schema:
          type: string
          enum: [active, closed]
      responses:
        "200":
          description: The account status has been changed.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
  
components:
  schemas:
    User:
      additionalProperties: false
      type: object
      required:
      - phoneNumber
      - email
      - password
      properties:
        id:
          type: string
          format: uuid
          readOnly: true
        firstName:
          type: string
          example: Rob
          maxLength: 100
        lastName:
          type: string
          example: Banks
          maxLength: 100
        phoneNumber:
          type: string
          example: 321123527
          maxLength: 20
        email:
          type: string
          example: rbanks@gmail.com
          maxLength: 256
        password:
          type: string
          format: password
          writeOnly: true
          example: GetMyP@ss1
          minLength: 8
          maxLength: 256
        accounts:
          type: array
          readOnly: true
          items:
            type: string
          example:
              - "NL03INHO0033576852"
              - "NL03INHO0033576883"
        role:
          type: string
          default: customer
          enum:
            - employee
            - customer
        accountStatus:
          type: string
          default: active
          enum:
            - active
            - disabled

    LoginDto:
      type: object
      additionalProperties: false
      properties:
        email:
          type: string
          example: rbanks@gmail.com
        password:
          type: string
          example: veryCoolPassword2

    BearerTokenDto:
      type: object
      properties:
        bearerToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI


    Transaction:
      type: object
      required:
        - amount
        - performedBy

      properties:
        transactionId:
          type: string
          format: uuid
          description: The ID of the created Transaction.
          readOnly: true

        transactionDate:
          type: string
          example: 2021/12/01 16:02:06
          description: Timestamp of the transaction.

        amount:
          type: number
          format: double
          example: 123.45
          minimum: 0
          description: The amonut of the transaction in EURO.

        performedBy:
          type: string
          format: uuid
          description: ID of the user performing the transaction.
          readOnly: true

    RegularTransaction:
      type: object
      required:
        - accountTo
        - accountFrom

      properties:
        accountTo:
          type: string
          example: NL04INHO6818968668
          description: IBAN of the account receiving the money.
          maxLength: 34

        accountFrom:
          type: string
          example: NL01INHO0000579848
          description: IBAN of the account sending the money.
          maxLength: 34
      allOf:
        - $ref: "#/components/schemas/Transaction"

    Deposit:
      type: object
      required:
        - accountTo
      properties:
        accountTo:
          type: string
          example: NL04INHO6818968668
          description: IBAN of the account receiving the money.
      allOf:
        - $ref: "#/components/schemas/Transaction"

    Withdrawal:
      type: object
      required:
        - accountFrom

      properties:
        accountFrom:
          type: string
          example: NL04INHO6818968668
          description: IBAN of the account withdrawing the money.
          maxLength: 34
      allOf:
        - $ref: "#/components/schemas/Transaction"

    Account:
      additionalProperties: false
      type: object
      properties:
        iban:
          type: string
          description: IBAN number of the account.
          example: NL03INHO0033576852
          maxLength: 34
        accountType:
          type: string
          enum: [saving, current]
          default: current
          description: The type of the account. This can be either saving or current.
        accountStatus:
          type: string
          enum : [active, closed]
          default: active
          description: The status of the account. This can be either active or closed.
        balance:
          type: number
          format: double
          default: 0
          minimum: 0

      required:
        - iban
        - accountType
        - accountStatus
        - balance

  # Parameters are for paginated enddpoint
  parameters:

    userIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: UUID
        example: 4a090b27-5300-456a-8041-4c63a5e31436

    emailParam:
      name: email
      in: query
      required: true
      schema:
        type: string
        example: "robbanks@gmail.com"

    limitParam:
      name: max
      in: query
      required: false
      description: The maximum number of items to return.
      schema:
        type: integer
        format: int32
        minimum: 10
        maximum: 50
        example: 15
        default: 10

    ibanParam:
      name: iban
      required: true
      in: path
      description: The account to perform the action on.
      schema:
        type: string
        example: NL01INHO0000579848
        maxLength: 34

    offsetParam:
      in: query
      required: false
      name: offset
      description: The number of items to skip before starting to collect the result set.
      schema:
        type: integer
        format: int32
        example: 60
        minimum: 0

    transactionIdParam:
      name: id
      in: path
      required: true
      schema:
        type: string
        format: UUID
        example: 4a090b27-5300-456a-8041-4c63a5e31436

  # Implementing bearer authentication
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

# Applying the security globally to all operations
security:
  - bearerAuth: []
