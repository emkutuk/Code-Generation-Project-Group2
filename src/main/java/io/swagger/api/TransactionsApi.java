/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.25).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.Deposit;
import io.swagger.model.Error;
import io.swagger.model.Transaction;
import io.swagger.model.Withdrawal;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.List;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-05-30T19:31:26.554Z[GMT]")
@Validated
public interface TransactionsApi {

  @Operation(
          summary = "Create a new Transaction.",
          description = "Create a new Transaction.",
          security = {
                  @SecurityRequirement(name = "bearerAuth")}, tags = {"Transaction"})
  @ApiResponses(value = {
          @ApiResponse(
                  responseCode = "201",
                  description = "Created",
                  content = @Content(schema = @Schema(implementation = Transaction.class))),
          @ApiResponse(
                  responseCode = "400",
                  description = "Bad Reqeust. Please try again.",
                  content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(
                  responseCode = "401",
                  description = "The entered credentials are invalid or incorrect. Please try again.",
                  content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(
                  responseCode = "403",
                  description = "You do not have access to perform this action. Forbidden.",
                  content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(
                  responseCode = "429",
                  description = "You have sent too many requests. Please try again in at least 300 seconds.",
                  content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(
                  responseCode = "200",
                  description = "An unknown error has occured.",
                  content = @Content(schema = @Schema(implementation = Error.class)))})
  @RequestMapping(
          value = "/Transactions",
          produces = {"application/json"},
          consumes = {"application/json"},
          method = RequestMethod.POST)
  ResponseEntity<Transaction> createTransaction(
          @Parameter(in = ParameterIn.DEFAULT, description = "",
                  required = true,
                  schema = @Schema()) @Valid @RequestBody Transaction body);

  @Operation(
          summary = "Return a list of Transactions.",
          description = "Returns an ordered list of Transactions for current user from most recent to oldest.",
          security = {
                  @SecurityRequirement(name = "bearerAuth")}, tags = {"Transaction"})
  @ApiResponses(value = {
          @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(allowableValues = {}))),
          @ApiResponse(responseCode = "400", description = "Bad Reqeust. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "401", description = "The entered credentials are invalid or incorrect. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "403", description = "You do not have access to perform this action. Forbidden.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "404", description = "Not Found.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "429", description = "You have sent too many requests. Please try again in at least 300 seconds.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "200", description = "An unknown error has occured.", content = @Content(schema = @Schema(implementation = Error.class)))})
  @RequestMapping(value = "/Transactions",
          produces = {"application/json"},
          method = RequestMethod.GET)
  ResponseEntity<List<Transaction>> getTransactionsByUser(@Min(10) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "The maximum number of items to return.", schema = @Schema(allowableValues = {}, minimum = "10", maximum = "50"
          , defaultValue = "10")) @Valid @RequestParam(value = "max", required = false, defaultValue = "10") Integer max, @Min(0) @Parameter(in = ParameterIn.QUERY, description = "The number of items to skip before starting to collect the result set.", schema = @Schema(allowableValues = {}
  )) @Valid @RequestParam(value = "offset", required = false) Integer offset);

  @Operation(summary = "Delete a scheduled transaction", description = "Delete a scheduled transaction by it's ID. You cannot delete a transaction that has already been processed. ", security = {
          @SecurityRequirement(name = "bearerAuth")}, tags = {"Transaction"})
  @ApiResponses(value = {
          @ApiResponse(responseCode = "204", description = "OK"),

          @ApiResponse(responseCode = "400", description = "Bad Reqeust. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "401", description = "The entered credentials are invalid or incorrect. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "403", description = "You do not have access to perform this action. Forbidden.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "404", description = "Not Found.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "429", description = "You have sent too many requests. Please try again in at least 300 seconds.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "200", description = "An unknown error has occured.", content = @Content(schema = @Schema(implementation = Error.class)))})
  @RequestMapping(value = "/Transactions/{id}",
          produces = {"application/json"},
          method = RequestMethod.DELETE)
  ResponseEntity<Void> deleteTransactionById(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("id") String id);


  @Operation(summary = "Deposit money into an account.", description = "Deposit money into an account.", security = {
          @SecurityRequirement(name = "bearerAuth")}, tags = {"Transaction"})
  @ApiResponses(value = {
          @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = Transaction.class))),

          @ApiResponse(responseCode = "400", description = "Bad Reqeust. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "401", description = "The entered credentials are invalid or incorrect. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "403", description = "You do not have access to perform this action. Forbidden.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "429", description = "You have sent too many requests. Please try again in at least 300 seconds.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "200", description = "An unknown error has occured.", content = @Content(schema = @Schema(implementation = Error.class)))})
  @RequestMapping(value = "/Transactions/Deposit",
          produces = {"application/json"},
          consumes = {"application/json"},
          method = RequestMethod.POST)
  ResponseEntity<Transaction> depositMoney(@Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Deposit body);


  @Operation(
          summary = "Edit a transaction",
          description = "Edits the specified transaction, given the ID.",
          security = {
                  @SecurityRequirement(name = "bearerAuth")
          },
          tags = {"Transaction"})
  @ApiResponses(value = {
          @ApiResponse(responseCode = "200",
                  description = "OK",
                  content = @Content(schema = @Schema(implementation = Transaction.class))),
          @ApiResponse(responseCode = "401",
                  description = "The entered credentials are invalid or incorrect. Please try again.",
                  content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "403",
                  description = "You do not have access to perform this action. Forbidden.",
                  content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "429",
                  description = "You have sent too many requests. Please try again in at least 300 seconds.",
                  content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "200",
                  description = "An unknown error has occured.",
                  content = @Content(schema = @Schema(implementation = Error.class)))
  })
  @RequestMapping(value = "/Transactions/{id}",
          produces = {"application/json"},
          consumes = {"application/json"},
          method = RequestMethod.PUT)
  ResponseEntity<Transaction> editTransactionById(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Transaction body);


  @Operation(summary = "Return a list of Transactions from IBAN.", description = "Return a list of transactions from the account with the specified IBAN.", security = {
          @SecurityRequirement(name = "bearerAuth")}, tags = {"Transaction"})
  @ApiResponses(value = {
          @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema=@Schema(allowableValues={  }))),
          @ApiResponse(responseCode = "400", description = "Bad Reqeust. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "401", description = "The entered credentials are invalid or incorrect. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "403", description = "You do not have access to perform this action. Forbidden.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "404", description = "Not Found.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "429", description = "You have sent too many requests. Please try again in at least 300 seconds.", content = @Content(schema = @Schema(implementation = Error.class))),
          @ApiResponse(responseCode = "200", description = "An unknown error has occured.", content = @Content(schema = @Schema(implementation = Error.class)))})
  @RequestMapping(value = "/Transactions/ByAccountNumber", produces = {"application/json"}, method = RequestMethod.GET)
  ResponseEntity<List<Transaction>> getTransactionByIBAN(@NotNull @Size(max = 34) @Parameter(in = ParameterIn.QUERY, description = "The account to perform the action on.", required = true, schema = @Schema()) @Valid @RequestParam(value = "IBAN", required = true) String IBAN, @Min(10) @Max(50) @Parameter(in = ParameterIn.QUERY, description = "The maximum number of items to return.", schema = @Schema(allowableValues = {}, minimum = "10", maximum = "50"
          , defaultValue = "10")) @Valid @RequestParam(value = "max", required = false, defaultValue = "10") Integer max, @Min(0) @Parameter(in = ParameterIn.QUERY, description = "The number of items to skip before starting to collect the result set.", schema = @Schema(allowableValues = {}
  )) @Valid @RequestParam(value = "offset", required = false) Integer offset);


  @Operation(summary = "Return a Transaction with the specified ID.", description = "Get a specific transaction by its ID.", security = {
          @SecurityRequirement(name = "bearerAuth")}, tags = {"Transaction"})
  @ApiResponses(value = {
          @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = Transaction.class))),

          @ApiResponse(responseCode = "400", description = "Bad Reqeust. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "401", description = "The entered credentials are invalid or incorrect. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "403", description = "You do not have access to perform this action. Forbidden.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "404", description = "Not Found.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "429", description = "You have sent too many requests. Please try again in at least 300 seconds.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "200", description = "An unknown error has occured.", content = @Content(schema = @Schema(implementation = Error.class)))})
  @RequestMapping(value = "/Transactions/{id}",
          produces = {"application/json"},
          method = RequestMethod.GET)
  ResponseEntity<Transaction> getTransactionById(@Parameter(in = ParameterIn.PATH, description = "", required = true, schema = @Schema()) @PathVariable("id") String id);


  @Operation(summary = "Withdraw money from an account.", description = "Withdraw money from the given account.", security = {
          @SecurityRequirement(name = "bearerAuth")}, tags = {"Transaction"})
  @ApiResponses(value = {
          @ApiResponse(responseCode = "200", description = "OK", content = @Content(schema = @Schema(implementation = Transaction.class))),

          @ApiResponse(responseCode = "400", description = "Bad Reqeust. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "401", description = "The entered credentials are invalid or incorrect. Please try again.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "403", description = "You do not have access to perform this action. Forbidden.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "429", description = "You have sent too many requests. Please try again in at least 300 seconds.", content = @Content(schema = @Schema(implementation = Error.class))),

          @ApiResponse(responseCode = "200", description = "An unknown error has occured.", content = @Content(schema = @Schema(implementation = Error.class)))})
  @RequestMapping(
          value = "/Transactions/Withdraw",
          produces = {"application/json"},
          consumes = {"application/json"},
          method = RequestMethod.POST)
  ResponseEntity<Transaction> withdrawMoney(@Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Withdrawal body);

}

